{"version":3,"sources":["components/Header.js","components/MapIcon.js","components/LeafletMap.js","components/LineChart.js","components/NavPanel.js","components/MapInfo.js","components/App.js","index.js"],"names":["Header","className","align","MapIcon","depth","this","props","strokeColor","stroke","bgColor","textColor","xpos","console","log","width","height","cx","cy","viewBox","aria-labelledby","role","r","fill","strokeWidth","font-size","x","y","Component","LeafletMap","useState","markers","setMarkers","selectedStationID","setSelectedStationID","loaded","setLoaded","mapcenter","mapRef","useRef","stateBoundayRef","stateMask","handleClick","e","station_id","target","options","changeStationParent","changeStation","useEffect","stationLocations","good_stations","a","ids","today","Date","seven_days_before","now","startDate","toLocaleDateString","year","month","day","endDate","url","URL","search","URLSearchParams","dataset","stations","dataTypes","includeAttributes","includeStationName","includeStationLocation","units","format","fetch","ds_res","json","ds_data","results","map","STATION","SNWD","DATE","station_depths","forEach","station","station_results","filter","length","last_measurement","parseInt","reduce","acc","curr","toString","Object","entries","Snow_Data","key","includes","station_name","info","Station_Name","lat","location","Latitude","long","Longitude","push","getDailySummaries","current","leafletElement","statebounday","bboxArray","bbox","VT_Boundary","VT_bounds","fitBounds","calc_xpos","len","Math","log10","icon","L","divIcon","iconAnchor","html","ReactDOMServer","renderToString","selectedIcon","Map","ref","center","zoom","maxZoom","minZoom","zoomControl","attributionControl","stationobj","idx","Marker","position","onClick","Popup","TileLayer","attribution","GeoJSON","data","style","weight","opacity","color","fillOpacity","VT_Mask","getDaysArray","start","end","arr","dt","setDate","getDate","moment","LineChart","state","isLoading","ChartData","labels","datasets","label","backgroundColor","borderColor","pointRadius","lineTension","borderWidth","chartReference","React","createRef","chartData","dates","value","order","setState","prevProps","special_datasets","responsive","maintainAspectRatio","title","display","text","fontSize","legend","legendCallback","chart","scales","xAxes","gridLines","drawOnChartArea","ticks","maxTicksLimit","yAxes","scaleLabel","labelString","tooltips","callbacks","tooltipItem","datasetIndex","yLabel","loading","type","NavPanel","Accordion","defaultActiveKey","Card","Toggle","variant","eventKey","Collapse","Tab","Container","id","Row","Col","sm","Nav","Item","Link","Content","Pane","href","rel","reformatName","phrase","toLowerCase","split","word","charAt","toUpperCase","slice","join","MapInfo","mapInfoData","Average_Depth","County","Current_Depth","Date_Range","Elevation","Station_ID","Station_URL","App","setStation","setIsLoading","snowData","setSnowData","fetchData","res","res_data","newStationID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29215759.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n\nconst Header = () => {\n\n    return(\n        <div className='Header'>\n           <h1 align='center'>Vermont Snow Depths <span>Current Season and Historic Snow Depths</span></h1> \n        </div>\n    )\n}\nexport default Header","import React, {Component} from 'react';\n\nexport default class MapIcon extends Component {\n\n\n  \n  render() {\n    const depth = this.props.depth || 0;\n    const strokeColor = this.props.strokeColor || '#d2d3d4';\n    const stroke = this.props.stroke || \"2\";\n    const bgColor = this.props.bgColor || '#d2d3d4';\n    const textColor = this.props.textColor || '#535354';\n    const xpos = this.props.xpos || \"48%\"\n\n    console.log('icon', depth[0], xpos)\n\n    return (\n      <svg width=\"30px\" height=\"30px\" cx='50' cy='50' viewBox=\"0 0 100 100\" className=\"donut\" aria-labelledby=\"beers-title beers-desc\" role=\"img\">\n        <circle className=\"donut-hole\" cx=\"50\" cy=\"50\" r=\"25\" fill=\"white\" role=\"presentation\"></circle>\n        <circle className=\"donut-ring\" cx=\"50\" cy=\"50\" r=\"25\" fill={bgColor} stroke={strokeColor} strokeWidth={stroke} role=\"presentation\"></circle>\n        <g className=\"chart-text\">\n          <text className=\"chart-number\" font-size = '2em' fill= {textColor} x={xpos} y=\"58%\">\n            {depth}\n          </text>\n        </g>\n      </svg>\n    );\n  }\n}\n\n// const myCustomColour = '#588470'\n\n// const markerHtmlStyles = `\n//     background-color: ${myCustomColour};\n//     width: 3rem;\n//     height: 3rem;\n//     display: block;\n//     left: -1.5rem;\n//     top: -1.5rem;\n//     position: relative;\n//     border-radius: 3rem 3rem 0;\n//     transform: rotate(45deg);\n//     border: 1px solid #FFFFFF`\n\n//     https://stackoverflow.com/questions/23567203/leaflet-changing-marker-color\n\n\n// const icon = L.divIcon({\n//   className: \"my-custom-pin\",\n//   iconAnchor: [0, 24],\n//   labelAnchor: [-6, 0],\n//   popupAnchor: [0, -36],\n//   html: `<span style=\"${markerHtmlStyles}\" />`\n// })","import React, { useState, useEffect, useRef } from 'react';\nimport { Map, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet'\nimport bbox from '@turf/bbox'\nimport MapIcon from './MapIcon'\nimport L from 'leaflet';\nimport esri from 'esri-leaflet';\nimport VT_Boundary from '../assets/VT_Data_-_State_Boundary.json'\nimport VT_Mask from '../assets/VT_Mask.json'\nimport Stations from '../assets/stations.json'\nimport Snow_Data from '../assets/snow_data.json'\nimport '../css/App.css';\nimport ReactDOMServer from 'react-dom/server';\nimport { scryRenderedComponentsWithType } from 'react-dom/test-utils';\n\n\ndebugger\n\nconst LeafletMap = (props) => {\n\n    // Markers are going to be built from state\n    const [markers, setMarkers] = useState([]);\n\n    // Selected Marker Station ID in state\n    const [selectedStationID, setSelectedStationID] = useState()\n\n    // Snow depths loaded\n    const [loaded, setLoaded] = useState(false);\n\n    const bound_style = () => {\n        return {\n            weight: 2,\n            opacity: 0.5,\n            color: 'grey',\n            fillOpacity: 0\n        };\n    }\n\n    const mask_style = () => {\n        return {\n            weight: 0,\n            opacity: 1,\n            color: 'white',\n            fillOpacity: 1\n        };\n    }\n\n    let mapcenter = [43.89, -72.5]\n\n    // create map and group refs useRef for functional components\n    const mapRef = useRef();\n    const stateBoundayRef = useRef();\n    const stateMask = useRef();\n\n    //Marker OnClick function\n    const handleClick = e => {\n        const station_id = e.target.options.station_id\n        setSelectedStationID(station_id)\n        // Need to trigger function to change the value in the MapInfo through SidePanel state/props from App state/props\n        const changeStationParent = props.changeStation\n        changeStationParent(station_id)\n        mapcenter = [43.89, -72.5]\n    }\n\n    useEffect(() => {\n\n\n        //Set Marker Locations \n        const stationLocations = []\n\n        // Stations with useful records based on consistency and recording interval\n        const good_stations = ['USC00435416',\n            'USC00432773',\n            'US1VTOL0001',\n            'USC00435542',\n            'USC00430193',\n            'USC00434120',\n            'US1VTES0003',\n            'USC00438169',\n            'US1VTOL0009',\n            'US1VTLM0007',\n            'USC00434290',\n            'USC00434261',\n            'USC00437607',\n            'USW00014742',\n            'USC00436391',\n            'USW00094705',\n            'USC00438556',\n            'US1VTAD0020',\n            'USC00438640',\n            'USC00436335'\n        ]\n\n\n\n        // Set selected marker from props from App\n        setSelectedStationID(props.station_id)\n        console.log('selectedStation', selectedStationID)\n\n\n        // API call to get current snowdepth for all stations\n\n        // Create comma separated string of all station ids\n        // Get all keys from stations.json\n\n\n\n        //Example url\n        // https://www.ncei.noaa.gov/access/services/data/v1?dataset=global-summary-of-the-year&dataTypes=DP01,DP05,DP10,DSND,DSNW,DT00,DT32,DX32,DX70,DX90,SNOW,PRCP&stations=ASN00084027&startDate=1952-01-01&endDate=1970-12-31&includeAttributes=true&format=json\n\n\n        const getDailySummaries = async () => {\n\n            const ids = good_stations;\n\n            // Set dates\n            const today = new Date();\n            const seven_days_before = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n\n            const startDate = seven_days_before.toLocaleDateString(\"sv-SE\", {\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n            });\n            const endDate = today.toLocaleDateString(\"sv-SE\", {\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n            });\n\n            console.log('DATES', startDate, endDate)\n\n            // I think the data range should be a week and if they haven't reported in the week prior then show that\n            // otherwise find the most recent SNWD value in what is returned\n\n            const url = new URL(\"https://www.ncei.noaa.gov/access/services/data/v1\")\n\n            url.search = new URLSearchParams({\n                dataset: 'daily-summaries',\n                stations: ids,\n                startDate: startDate,\n                endDate: endDate,\n                dataTypes: 'SNWD',\n                includeAttributes: true,\n                includeStationName: true,\n                includeStationLocation: true,\n                units: 'standard',\n                format: 'json'\n            })\n\n            console.log('fetch url', url)\n            const ds_res = await fetch(url);\n            const ds_data = await ds_res.json()\n\n            // narrow data down to most recent reading for each station\n            // Get results for each station\n            let results = ds_data.map(({ STATION, SNWD, DATE }) => ({ STATION, SNWD, DATE }))\n\n            // Create obj for storing most recent depth for each station\n            let station_depths = {}\n\n            good_stations.forEach(station => {\n                // let station_results = results.find(x => x.STATION === station)\n                let station_results = results.map((e) => e.STATION === station ? e.SNWD : null)\n                station_results = station_results.filter(x => x != null)\n                console.log('station_results', station_results)\n\n                // if station_results has no results then return 'N/A'\n                if (station_results.length === 0) {\n                    let last_measurement = ['']\n                    station_depths[station] = last_measurement\n                }\n                else {\n                    // get last non null item in array this is the most recent measurement\n                    let last_measurement = parseInt(station_results.reduce((acc, curr) => curr ? curr : acc)).toString()\n                    station_depths[station] = last_measurement\n                }\n            });\n\n\n            // Get result with date closest today? always first or last?\n\n            console.log('daily_summaries_prior_week', station_depths)\n\n            for (let [key, value] of Object.entries(Snow_Data)) {\n                if (good_stations.includes(key)) {\n                    const station_id = key\n                    const station_name = Snow_Data[key].info.Station_Name\n                    const lat = Snow_Data[key].location.Latitude\n                    const long = Snow_Data[key].location.Longitude\n                    const depth = station_depths[key]\n\n                    stationLocations.push(\n                        {\n                            'station_id': station_id,\n                            'station_name': station_name,\n                            'lat': lat,\n                            'long': long,\n                            'depth': depth\n                        }\n                    )\n                }\n            }\n\n            setMarkers(stationLocations)\n            setLoaded(true)\n        }\n\n        getDailySummaries()\n\n\n        // LAT AND LONG from the daily summaries might be more precise! 4 dec\n\n        // fetch(url)        //    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        //    fetch(url).then(...)\n        // https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation\n\n        //  https://www.ncei.noaa.gov/access/services/data/v1?dataset=daily-summaries&stations=USC00435416&startDate=2020-06-07&endDate=2020-06-14&&\n        //format=json&&includeAttributes=true&includeStationName=true&includeStationLocation=true&units=standard\n        //      unsupported dataset daily-snow\n        //         daily-summaries works and has the attribute SNWD which is Snow Depth in inches\n\n        // const map = this.mapRef.current.leafletElement;\n        // const group = this.groupRef.current.leafletElement;\n        // map.fitBounds(group.getBounds());\n\n        // Destructure mapRef\n        const { current = {} } = mapRef;        // sets it to empty object if mapRef not defined\n        const { leafletElement: map } = current;\n\n        // need geojson ref\n        const { statebounday = {} } = stateBoundayRef;\n\n        console.log('geojson ref', statebounday)\n\n        // use turf/bbox to get bounding box (I couldn't figure out the GeoJSON refs...for Leaflet)\n\n        const bboxArray = bbox(VT_Boundary);\n        const VT_bounds = [\n            [bboxArray[1], bboxArray[0]],\n            [bboxArray[3], bboxArray[2]]\n        ]\n\n        map.fitBounds(VT_bounds)   // This works but doesn't allow for the partial zoom steps like zoomSnap does. \n        // Needs better way for the container to resize based on available space and width/heigh ratio\n\n        mapcenter = [43.89, -72.5]\n\n\n        // Use fitBounds to set zoom and extent\n        // map.fitBounds(statebounday.getBounds()); https://stackoverflow.com/questions/40451506/react-leaflet-how-to-set-zoom-based-on-geojson\n\n        //API call to get the current snowdepth for all the stations\n        // const getCurrentDepths = async () => {\n        //     // get station names from stations.json\n        //     const station_names = Object.keys(Stations)\n\n\n        // }\n\n        // getCurrentDepths()\n\n    }, [mapRef]);\n\n    // This allows the marker to be dynamic, perhaps reflecting the latest measurement at the site?\n    // Would be a lot of requests to get that info unless it is available a different way\n\n    // number of digits\n    const numDigits = (x) => {\n        return (Math.log10((x ^ (x >> 31)) - (x >> 31)) | 0) + 1;\n    }\n\n    // function for calc x position\n    const calc_xpos = (depth) => {\n        // get length of string to set xpos\n        const len = numDigits(depth)\n\n        if (len === 1) {\n            return '43%'\n        }\n        if (len === 2) {\n            return '48%'\n        }\n        if (len === 3) {\n            return '30%'\n        }\n    }\n\n    // Grey Border\n    const icon = (depth) => {\n\n        const xpos = calc_xpos(depth)\n\n        return (L.divIcon({\n            className: 'custom-icon',\n            iconAnchor: [10, 10],\n            html: ReactDOMServer.renderToString(< MapIcon depth={depth}\n                xpos={xpos}\n                bgColor={'#ffffff00'}\n                strokeColor={'#202020'} />)\n        }))\n    }\n\n    // Red Border\n    const selectedIcon = (depth) => {\n\n        const xpos = calc_xpos(depth)\n\n        return (L.divIcon({\n            className: 'custom-icon',\n            iconAnchor: [10, 10],\n            html: ReactDOMServer.renderToString(< MapIcon depth={depth}\n                xpos={xpos}\n                bgColor={'#ffffff00'}\n                strokeColor={'#4A81FF'}\n                stroke={10}\n                textColor={'blue'}\n            />)\n        }))\n    };\n\n\n\n    return (\n        <div className='mapContainer' >\n\n            <Map className='Map'\n                ref={mapRef}\n                center={mapcenter}\n                zoom={8}\n                // zoomSnap={7.5} //ideally this could be adjusted based on screensize (use fitBounds for this)\n                maxZoom={8}\n                minZoom={8}\n                zoomControl={false}\n                attributionControl={false} >\n                {\n                    markers.map((stationobj, idx) => {\n                        // Tunery Operator within the map was the only way I could get this to work with two diff markers\n                        // could also change marker size..\n                        return stationobj.station_id === selectedStationID ?\n                            < Marker key={`marker-${stationobj.station_name}`}\n                                station_id={stationobj.station_id}\n                                station_name={stationobj.station_name}\n                                position={[stationobj.lat, stationobj.long]}\n                                icon={selectedIcon(stationobj.depth)}\n                                onClick={handleClick}\n                            >\n                                <Popup >\n                                    <span > Station Name < br /> {stationobj.station_name} </span>\n                                </Popup>\n                            </Marker>\n\n                            :\n\n                            < Marker key={`${stationobj.station_name}`}\n                                station_id={stationobj.station_id}\n                                station_name={stationobj.station_name}\n                                position={[stationobj.lat, stationobj.long]}\n                                icon={icon(stationobj.depth)}\n                                onClick={handleClick}\n                            >\n                                <Popup >\n                                    <span > Station Name < br /> {stationobj.station_name} </span>\n                                </Popup>\n                            </Marker>\n                    })\n                }\n\n\n                <TileLayer\n                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}\"\n                    attribution='&copy; Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                />\n\n\n                <GeoJSON\n                    ref={stateBoundayRef}\n                    key='1'\n                    data={VT_Boundary}\n                    style={bound_style}\n                />\n                <GeoJSON\n                    ref={stateMask}\n                    key='2'\n                    data={VT_Mask}\n                    style={mask_style}\n                />\n\n            </Map>\n            <div className='mapHeader' >\n                {loaded\n                    ?\n                    <div>\n                        <div>Last Reported Snow Depths</div>\n                        <div>Select Marker to view comparison with past seasons.</div>\n                        <div>If marker is blank, no Snow Depth Report is available in past 7 days.</div>\n                    </div>\n                    :\n                    <div>Loading Last Reported Snow Depths</div>\n                }\n            </div>\n        </div >\n\n    );\n\n}\n\nexport default LeafletMap;","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { defaults, Line } from 'react-chartjs-2'\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\n// Set default globally chart.js styles https://blog.bitsrc.io/customizing-chart-js-in-react-2199fa81530a\n// defaults.global.elements.pointDot = false\n\n// defaults.global.elements.line.tension = 0;\n\n\n\nconst getDaysArray = (start, end) => {\n  for (var arr = [], dt = new Date(start); dt <= end; dt.setDate(dt.getDate() + 1)) {\n    arr.push(moment(new Date(dt)).format(\"MMM D\"));\n  }\n  return arr;\n};\n\nclass LineChart extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      ChartData: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: [],\n            backgroundColor: 'rgba(100,60,180, 0.6)',\n            borderColor: 'rgba(27,27,27,.95)',\n            pointRadius: 0,\n            lineTension: 0.1,\n            borderWidth: 1,\n            fill: false\n          }\n        ]\n      }\n    };\n    this.chartReference = React.createRef();\n  };\n\n  componentDidMount() {\n    const chartData = this.props.chartData\n    const dates = getDaysArray(new Date('09-01-2019'), new Date('06-30-2020'))\n    const datasets = []\n\n    for (let [key, value] of Object.entries(chartData)) {\n      if (key == 'Average Season') {\n        datasets.push(\n          {\n            label: key,\n            data: value,\n            order: 2,\n            backgroundColor: 'rgba(255,0,0,.02)',\n            borderColor: 'rgba(255,0,0,.95)',\n            pointRadius: 0,\n            lineTension: 0.1,\n            borderWidth: 2,\n            fill: true\n          }\n        )\n      }\n      else if (key === 'Current Season') {\n        datasets.push(\n          {\n            label: key,\n            data: value,\n            order: 1,\n            backgroundColor: 'rgba(0,0,255, .02)',\n            borderColor: 'rgba(0, 31, 255,.95)',\n            pointRadius: 0,\n            lineTension: 0.1,\n            borderWidth: 2,\n            fill: false\n          }\n        )\n      }\n      else {\n        datasets.push(\n          {\n            label: key,\n            data: value,\n            order: 3,\n            backgroundColor: 'rgba(100,100,100, 0.6)',\n            borderColor: 'rgba(146,146,146,.95)',\n            pointRadius: 0,\n            lineTension: 0.1,\n            borderWidth: 0.25,\n            fill: false\n          }\n        )\n      }\n    }\n\n\n\n\n    this.setState({\n      isLoading: false,\n      ChartData: {\n        labels: dates,\n        datasets: datasets\n      }\n    })\n\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const chartData = this.props.chartData\n      const dates = getDaysArray(new Date('09-01-2019'), new Date('06-30-2020'))\n      const datasets = []\n\n      const special_datasets = ['Average Season', 'Current Season']\n\n      for (let [key, value] of Object.entries(chartData)) {\n        if (special_datasets.includes(key)) {\n          if (key === 'Average Season') {\n            datasets.push(\n              {\n                label: key,\n                data: value,\n                order: 2,\n                backgroundColor: 'rgba(255,0,0,.02)',\n                borderColor: 'rgba(255,0,0,.95)',\n                pointRadius: 0,\n                lineTension: 0.1,\n                borderWidth: 2,\n                fill: true\n              }\n            )\n          }\n          if (key === 'Current Season') {\n            datasets.push(\n              {\n                label: key,\n                data: value,\n                order: 1,\n                backgroundColor: 'rgba(0,0,255, .02)',\n                borderColor: 'rgba(0, 31, 255,.95)',\n                pointRadius: 0,\n                lineTension: 0.1,\n                borderWidth: 2,\n                fill: true\n              }\n            )\n          }\n        }\n        else {\n          datasets.push(\n            {\n              label: key,\n              data: value,\n              order: 3,\n              backgroundColor: 'rgba(100,100,100, 0.6)',\n              borderColor: 'rgba(146,146,146,.95)',\n              pointRadius: 0,\n              lineTension: 0.1,\n              borderWidth: 0.25,\n              fill: false\n            }\n          )\n        }\n\n        this.setState({\n          isLoading: false,\n          ChartData: {\n            labels: dates,\n            datasets: datasets\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n\n    // Set up Chart options\n    const options = {\n      responsive: true,\n      maintainAspectRatio: true,\n      title: {\n        display: false,\n        text: 'Snow depths',\n        fontSize: 12\n      },\n      legend: {\n        display: false,\n        position: 'right'\n      },\n      legendCallback: function (chart) {\n        // Return the HTML string here.\n        console.log(chart.data.datasets);\n        const datasets = chart.data.datasets\n        var text = [];\n        // 'Average Season'\n        // 'Current Season Snow Depth'\n        datasets.forEach(dataset => {\n          if (dataset.label === 'Average Season')\n            text.push(dataset.label)\n        });\n\n        // for (var i = 0; i < chart.data.datasets[0].data.length; i++) {\n        //   text.push('<li><span id=\"legend-' + i + '-item\" style=\"background-color:' + chart.data.datasets[0].backgroundColor[i] + '\"   onclick=\"updateDataset(event, ' + '\\'' + i + '\\'' + ')\">');\n        //   if (chart.data.labels[i]) {\n        //     text.push(chart.data.labels[i]);\n        //   }\n        //   text.push('</span></li>');\n        // }\n        // text.push('</ul>');\n        // console.log(text)\n        return text;\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            drawOnChartArea: false\n          },\n\n          ticks: {\n            maxTicksLimit: 20,\n            //   stepsize: 30,\n            // callback: function (value, index, values) { /// HAven't quite figured out this callback, can adjust labels but only if they are placed...\n            //   const indicestokeep = [0, 32, 45] //ticks to labels conversion could also help here\n            //   const labelstokeep = ['Sep 1st', 'Oct 3rd']\n\n\n            //   if (!indicestokeep.includes(index)) {\n            //     value = null\n            //     return value\n            //   } else{\n            //     return value\n            //   }\n\n            // }\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Measured Depth (Inches)'\n          },\n          gridLines: {\n            drawOnChartArea: false\n          }\n        }]\n      },\n      tooltips: {\n        callbacks: {\n          label: function (tooltipItem, data) {\n            var label = data.datasets[tooltipItem.datasetIndex].label + ':';\n\n            // if (label) {\n            //     label += label;\n            // }\n            label += ' ' + tooltipItem.yLabel + ' in'\n\n            return label;\n          }\n        }\n      }\n    }\n\n    const isLoading = this.props.loading\n\n    // || is or\n\n    return (\n      <div className='lineChartContainter'>\n        {/* Change what is rendered in the Chart div based on if the depths from current season have returned yet */}\n        {isLoading\n          ? <div className='LoadingContainer'>\n            <div className='LoadingText'>\n              Gathering Snow Data\n              </div>\n            <Loader className='Loader'\n              type=\"Circles\"\n              color=\"#DBDDDE\"\n              height={80}\n              width={80}\n            />\n          </ div>\n          :\n          <Line\n            ref={this.chartReference}\n            data={this.state.ChartData}\n            // height={250}\n            // width={650} responsive\n            options={options}\n          />\n        }\n\n      </div>\n    )\n  }\n};\n\nexport default LineChart;","import React, { useState, useEffect } from 'react'\nimport '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Accordion, Button, Card, Tabs, Nav, Row, Col, Tab } from 'react-bootstrap'\n\n\n\nconst NavPanel = () => {\n\n\n    return (\n        <div className='NavPanel'>\n            {/* Custom Styling for React Bootstrap...couldn't figure out how to have it separate... */}\n            {/* <style src=\"'../css/App.css'\" type=\"text/css\"></style> */}\n            <style type=\"text/css\">\n                {`\n                .card{\n                    border: none;\n                    padding: 0px 0px 0px 30px;\n                }\n\n                .card-header{\n                    background-color: white;\n                    border: none;\n                }\n\n                .accordion-toggle {\n                    background-color: white;\n                    border: none;\n                    color: gray;\n                }\n                .nav-pills .nav-link.active{\n                    background-color: gray;\n                }\n\n                .nav-pills .nav-link{\n                    color: gray;\n                }\n\n                .learnmoretext{\n                    font-size: small;\n                }\n                `}\n            </style>\n\n\n            <Accordion defaultActiveKey=\"0\">\n                <Card>\n                    <Card.Header className='card-header'>\n                        <Accordion.Toggle className='accordion-toggle' variant=\"outline-dark\" eventKey=\"1\">\n                            Learn More\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"1\">\n                        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                            <Row>\n                                <Col sm={3}>\n                                    <Nav variant=\"pills\" className=\"flex-column\">\n                                        <Nav.Item>\n                                            <Nav.Link eventKey=\"first\">About</Nav.Link>\n                                        </Nav.Item>\n                                        <Nav.Item>\n                                            <Nav.Link eventKey=\"second\">Data</Nav.Link>\n                                        </Nav.Item>\n                                    </Nav>\n                                </Col>\n                                <Col sm={9}>\n                                    <Tab.Content>\n                                        <Tab.Pane eventKey=\"first\">\n                                            <div className='learnmoretext'>\n                                                I created this web application to provide an interface for exploring Vermont snow depths for the current winter season and historic records.\n                                                It was inspired by the wonderful <a href='https://www.matthewparrilla.com/mansfield-stake/' target='_blank' rel=\"noopener noreferrer\">Mansfield Snow Stake page</a>.\n                                                Any comments, questions, suggestions, or leads on other data to incorporate send an email to vermontsnowdepths@gmail.com\n                                        </div>\n                                        </Tab.Pane>\n                                        <Tab.Pane eventKey=\"second\">\n                                            <div className='learnmoretext'>\n                                                The <a href='https://www.ncdc.noaa.gov/snow-and-ice/daily-snow/VT/snowfall/'>NOAA Centers for Environmental Information Daily Snowfall and Snow Depth dataset</a> is the primary source of snow depths shown in this application. The data is collected and processed from public APIs and is not certified data.\n                                                Basemap is <a href='https://leaflet-extras.github.io/leaflet-providers/preview/#filter=Esri.WorldTerrain' target='_blank' rel=\"noopener noreferrer\"> ESRI World Terrain</a>.\n                                                Repository for this site can be found on <a href='https://github.com/CDowey/snowdepth' target='_blank' rel=\"noopener noreferrer\">Github</a>.\n                                    </div>\n                                        </Tab.Pane>\n                                    </Tab.Content>\n                                </Col>\n                            </Row>\n                        </Tab.Container>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n            {/* <Accordion defaultActiveKey=\"0\">\n                <Card>\n                    <Card.Header className='learnmore'>\n                        <Accordion.Toggle variant=\"outline-dark\" eventKey=\"1\">\n                            Learn More\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                            <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                                <Tab eventKey=\"home\" title=\"About\">\n                                </Tab>\n                                <Tab eventKey=\"profile\" title=\"Data\">\n \n                                </Tab>\n                            </Tabs>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n            </Accordion> */}\n        </div>\n    )\n\n}\n\nexport default NavPanel","import React, { useState, useEffect } from 'react'\nimport '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Stations from '../assets/stations.json'\n\n\nconst reformatName = (phrase) => {\n    return phrase\n        .toLowerCase()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n};\n\n\n\n\nconst MapInfo = (props) => {\n\n    // Destructure Props\n    let { Average_Depth, County, Current_Depth, Date_Range, Elevation, Station_ID, Station_Name } = props.mapInfoData\n\n    // Build Station URL\n    const Station_URL = 'https://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:' + Station_ID + '/detail'\n\n    return (\n        <div className='MapInfo'>\n            {reformatName(Station_Name)}\n            <br></br>\n            <table className='mapStationTable'>\n                <tbody>\n                    <tr>                        <td>\n                        <span className='stationAttributeName'>Station: </span>\n                        <span className='stationAttributeValue'><a href={Station_URL} target=\"_blank\" rel=\"noopener noreferrer\">{Station_ID}</a></span>\n                    </td>\n                        <td>\n                            <span className='stationAttributeName'>Current Snow Depth: </span>\n                            <span className='currentSnowDepthAttribute'>{Current_Depth} in</span>\n                        </td>\n\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className='stationAttributeName'>Elevation: </span>\n                            <span className='stationAttributeValue'>{Elevation} ft</span>\n                        </td>\n                        <td>\n                            <span className='stationAttributeName'>Average Depth On This Date: </span>\n                            <span className='avgSnowDepthAttribute'>{Average_Depth} in</span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className='stationAttributeName'>County: </span>\n                            <span className='stationAttributeValue'>{reformatName(County)}</span>\n                        </td>\n                        <td>\n                            <span className='stationAttributeName'>Available Date Range: </span>\n                            <span className='stationAttributeValue'>{Date_Range}</span>\n                        </td>\n\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\nexport default MapInfo","import '../css/App.css';\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport LeafletMap from './LeafletMap';\nimport SidePanel from './SidePanel';\nimport LineChart from './LineChart';\nimport MapInfo from './MapInfo'\nimport NavPanel from './NavPanel';\n\n\nconst App = () => {\n\n  const [station, setStation] = useState('USC00435416')\n  const [isLoading, setIsLoading] = useState(true)\n  const [snowData, setSnowData] = useState({})\n\n\n\n  const changeStation = (newStationID) => {\n    setStation(newStationID);\n   // setIsLoading(true)\n  }\n\n  console.log('App station', station)\n\n  const fetchData = async (station) => {\n\n    const url_prefix = 'http://localhost:4000/'\n    const url = url_prefix + station + '/data.json'\n    const res = await fetch(url);\n    const res_data = await res.json();\n    setSnowData(res_data)\n    setIsLoading(false)\n    console.log('res_data', snowData)\n  }\n\n  useEffect(() => {\n\n    fetchData(station)\n\n  }, [station]\n\n  )\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className='rowContainer'>\n        <LeafletMap changeStation={changeStation} station_id={station} />\n        <div className='sidePanel'>\n          <div className='chartContainer'>\n            {/* * Use this conditional statement to change what is return based on isLoading */}\n            {isLoading\n                ? ''\n                : <LineChart chartData={snowData.data.chartData} />\n                }\n            {/* <LineChart className='lineChart'\n                    data={snowData} station={station} loading={isLoading}/> */}\n          </div>\n          {isLoading\n            ? ''\n            : <MapInfo mapInfoData={snowData.data.info} />}\n          <NavPanel className='NavPanel' />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}